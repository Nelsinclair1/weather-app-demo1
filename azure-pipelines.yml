# Azure DevOps Pipeline for Weather App
trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'Azure-StudentDemo-Connection'
  imageRepository: 'weather-app'
  containerRegistry: 'studentdemo2024acr.azurecr.io'
  dockerfilePath: 'WeatherApp/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Kubernetes configuration
  kubernetesServiceConnection: 'Azure-StudentDemo-Connection'
  resourceGroupName: 'student-demo'
  aksClusterName: 'student-aks-cluster'

stages:
- stage: Build
  displayName: Build and Test
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
    
    - task: DotNetCoreCLI@2
      displayName: 'Restore dependencies'
      inputs:
        command: 'restore'
        projects: 'WeatherApp/WeatherApp.csproj'
    
    - task: DotNetCoreCLI@2
      displayName: 'Build application'
      inputs:
        command: 'build'
        projects: 'WeatherApp/WeatherApp.csproj'
        arguments: '--configuration Release --no-restore'
    
    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: 'WeatherApp/WeatherApp.csproj'
        arguments: '--configuration Release --no-build --verbosity normal'
      continueOnError: true

- stage: BuildAndPushImage
  displayName: Build and Push Docker Image
  dependsOn: Build
  jobs:
  - job: BuildAndPush
    displayName: Build and Push Docker Image
    steps:
    - task: AzureCLI@2
      displayName: 'Build and Push Image to ACR'
      inputs:
        azureSubscription: '$(dockerRegistryServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Build and push image using ACR build
          az acr build \
            --registry studentdemo2024acr \
            --image $(imageRepository):$(tag) \
            --image $(imageRepository):latest \
            WeatherApp/

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: BuildAndPushImage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Deploy to AKS'
            inputs:
              azureSubscription: '$(kubernetesServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Get AKS credentials
                az aks get-credentials \
                  --resource-group $(resourceGroupName) \
                  --name $(aksClusterName) \
                  --overwrite-existing
                
                # Update deployment with new image
                kubectl set image deployment/weather-app \
                  weather-app=$(containerRegistry)/$(imageRepository):$(tag) \
                  --record
                
                # Wait for deployment to complete
                kubectl rollout status deployment/weather-app --timeout=300s
                
                # Get service information
                kubectl get service weather-app-service
                
                # Show pods status
                kubectl get pods -l app=weather-app